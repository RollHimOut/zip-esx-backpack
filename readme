Overview of the Script

	1.	Features:
	•	Backpack as a usable item.
	•	Opens a secondary inventory (linked to the backpack ID).
	•	Persistent storage of backpack items in the database.
	•	Restricts players to carrying only one backpack at a time.
	2.	Requirements:
	•	ox_inventory (fully set up and running).
	•	A MySQL database (ensure oxmysql or mysql-async is properly installed).
	3.	Files Provided:
	•	config.lua – Configuration for the backpack.
	•	server.lua – Handles database saving, loading, and logic.
	•	client.lua – Manages client-side interactions with the backpack.
	4.	SQL Setup:
	•	A new table for backpack storage.

1. SQL Table for Backpack Items

Run the following SQL query to create a table for storing backpack inventories:

CREATE TABLE backpack_inventory (
    id INT AUTO_INCREMENT PRIMARY KEY,
    backpack_id VARCHAR(50) NOT NULL,
    item_name VARCHAR(50) NOT NULL,
    item_count INT NOT NULL,
    metadata JSON DEFAULT NULL
);

3. client.lua

local currentBackpack = nil

RegisterNetEvent('backpack:useItem', function()
    local playerPed = PlayerPedId()

    if currentBackpack then
        -- Backpack already equipped
        TriggerEvent('ox_inventory:openInventory', 'stash', currentBackpack)
    else
        -- Equip a new backpack
        TriggerServerEvent('backpack:equip')
    end
end)

RegisterNetEvent('backpack:equipBackpack', function(backpackId)
    currentBackpack = backpackId
    ESX.ShowNotification("Backpack equipped. Use it to open the inventory.")
end)

RegisterNetEvent('backpack:unequipBackpack', function()
    currentBackpack = nil
    ESX.ShowNotification("Backpack unequipped.")
end)

-- Prevent players from equipping multiple backpacks
Citizen.CreateThread(function()
    while true do
        Citizen.Wait(5000) -- Check every 5 seconds
        if currentBackpack then
            local hasBackpack = exports.ox_inventory:Search('count', Config.BackpackItem)
            if hasBackpack > 1 then
                ESX.ShowNotification("You can only carry one backpack!")
                TriggerServerEvent('backpack:removeExtra')
            end
        end
    end
end)

4. server.lua

local ox_inventory = exports.ox_inventory

RegisterServerEvent('backpack:equip', function()
    local xPlayer = ESX.GetPlayerFromId(source)

    -- Check if player already has a backpack equipped
    local equippedBackpack = xPlayer.getInventoryItem(Config.BackpackItem)
    if not equippedBackpack or equippedBackpack.count < 1 then
        TriggerClientEvent('esx:showNotification', source, "You don't have a backpack to equip.")
        return
    end

    -- Generate a unique backpack ID
    local backpackId = 'backpack_' .. xPlayer.identifier .. '_' .. math.random(10000, 99999)

    -- Assign stash for the backpack
    ox_inventory:RegisterStash(backpackId, "Backpack", Config.MaxSlots, Config.MaxWeight)

    -- Equip the backpack
    TriggerClientEvent('backpack:equipBackpack', source, backpackId)
end)

RegisterServerEvent('backpack:removeExtra', function()
    local xPlayer = ESX.GetPlayerFromId(source)
    local extraBackpacks = xPlayer.getInventoryItem(Config.BackpackItem).count - 1

    if extraBackpacks > 0 then
        xPlayer.removeInventoryItem(Config.BackpackItem, extraBackpacks)
        TriggerClientEvent('esx:showNotification', source, "Extra backpacks have been removed.")
    end
end)

AddEventHandler('ox_inventory:saveInventory', function(stashName, items)
    if string.sub(stashName, 1, 8) == "backpack" then
        -- Save items to the database
        local backpackId = stashName
        MySQL.Async.execute('DELETE FROM backpack_inventory WHERE backpack_id = ?', {backpackId})

        for _, item in pairs(items) do
            MySQL.Async.execute('INSERT INTO backpack_inventory (backpack_id, item_name, item_count, metadata) VALUES (?, ?, ?, ?)', {
                backpackId,
                item.name,
                item.count,
                json.encode(item.metadata or {})
            })
        end
    end
end)

AddEventHandler('ox_inventory:loadInventory', function(stashName, cb)
    if string.sub(stashName, 1, 8) == "backpack" then
        -- Load items from the database
        local items = {}
        local backpackId = stashName

        MySQL.Async.fetchAll('SELECT * FROM backpack_inventory WHERE backpack_id = ?', {backpackId}, function(result)
            for _, row in ipairs(result) do
                table.insert(items, {
                    name = row.item_name,
                    count = row.item_count,
                    metadata = json.decode(row.metadata or '{}')
                })
            end
            cb(items)
        end)
    else
        cb({})
    end
end)

5. Adding the Backpack Item

In your ox_inventory item configuration (likely shared/items.lua), add the backpack item:

['backpack'] = {
    label = 'Backpack',
    weight = 1.0, -- Weight of the backpack itself
    stack = false, -- Backpacks should not stack
    close = true, -- Close inventory when used
    description = 'A handy backpack for storing additional items.',
    client = {
        event = 'backpack:useItem',
    },
}

6. Selling the Backpack

Since you’ve mentioned the shop is already configured, ensure the backpack is added to the shop’s item list in your ox_inventory shop configuration:

['backpack'] = {
    price = 250, -- Example price
    amount = 10, -- Stock
}

How It Works

	1.	Use the Backpack Item:
	•	Players use the backpack item to equip it.
	•	A unique stash ID is generated for the player.
	2.	Open Backpack Inventory:
	•	When used, it opens a stash linked to the backpack.
	3.	Save Items:
	•	Items stored in the backpack persist in the database using ox_inventory:saveInventory.
	4.	Load Items:
	•	When opening the backpack, the script fetches stored items from the database.
	5.	Restrict Extra Backpacks:
	•	Prevents players from equipping more than one backpack.

Would you like to expand on this, such as adding custom backpack skins or other features?
